# Generated by Django 5.2.3 on 2025-08-15 16:08

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('tipo_usuario', models.CharField(choices=[('ADMIN', 'Administrador'), ('EMPRESA', 'Empresa'), ('CONTADOR', 'Contador')], default='EMPRESA', max_length=10, verbose_name='tipo de usuario')),
                ('es_principal', models.BooleanField(default=False, help_text='Indica si este usuario es el principal de la empresa', verbose_name='Usuario principal')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuario',
                'verbose_name_plural': 'usuarios',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='Empresa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre legal o comercial de la empresa', max_length=100, verbose_name='Nombre de la empresa/compañía')),
                ('giro', models.CharField(default='Sin giro especificado', max_length=100, verbose_name='Giro de la compañía/empresa')),
                ('cantidad_empleados', models.IntegerField(default=1, verbose_name='Cantidad de empleados (aproximadamente)')),
                ('ciudad', models.CharField(default='Ciudad no especificada', max_length=100, verbose_name='Ciudad')),
                ('estado', models.CharField(default='Estado no especificado', max_length=100, verbose_name='Estado')),
                ('activa', models.BooleanField(default=True, help_text='Indica si la empresa está activa en el sistema', verbose_name='Activa')),
                ('fecha_registro', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de registro')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('usuario', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='empresa', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'ordering': ['-fecha_registro'],
            },
        ),
        migrations.CreateModel(
            name='Empleado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=50, verbose_name='Nombre')),
                ('apellido_paterno', models.CharField(max_length=50, verbose_name='Apellido Paterno')),
                ('apellido_materno', models.CharField(blank=True, max_length=50, null=True, verbose_name='Apellido Materno')),
                ('nss', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message='El NSS debe tener 11 dígitos', regex='^\\d{11}$')], verbose_name='Número de Seguro Social')),
                ('rfc', models.CharField(max_length=13, validators=[django.core.validators.RegexValidator(message='RFC inválido para persona física', regex='^[A-Z&Ñ]{4}\\d{6}[A-V1-9][0-9A-Z]$')], verbose_name='RFC')),
                ('sueldo_mensual', models.DecimalField(blank=True, decimal_places=2, help_text='Obligatorio solo para periodo MENSUAL', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Sueldo Mensual')),
                ('salario_diario', models.DecimalField(blank=True, decimal_places=2, help_text='Obligatorio para periodos SEMANAL/QUINCENAL', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Salario Diario')),
                ('fecha_ingreso', models.DateField(verbose_name='Fecha de Ingreso')),
                ('periodo_nominal', models.CharField(choices=[('SEMANAL', 'Semanal'), ('QUINCENAL', 'Quincenal'), ('MENSUAL', 'Mensual')], default='QUINCENAL', max_length=10, verbose_name='Periodo de Pago')),
                ('dias_descanso', models.JSONField(default=list, help_text='Días de descanso (0=Lunes, 6=Domingo)', verbose_name='Días de Descanso')),
                ('dias_laborados', models.PositiveSmallIntegerField(default=0, help_text='Calculado automáticamente', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Días Laborados')),
                ('faltas_en_periodo', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Faltas en Periodo')),
                ('fechas_faltas', models.JSONField(blank=True, default=list, help_text='Formato YYYY-MM-DD', verbose_name='Fechas de Faltas')),
                ('zona_salarial', models.CharField(choices=[('general', 'Zona General'), ('frontera', 'Zona Frontera Norte')], default='general', max_length=10, verbose_name='Zona Salarial')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('fecha_baja', models.DateField(blank=True, null=True, verbose_name='Fecha de Baja')),
                ('motivo_baja', models.TextField(blank=True, null=True, verbose_name='Motivo de Baja')),
                ('empresa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='empleados', to='gestion.empresa', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'ordering': ['apellido_paterno', 'apellido_materno', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Nomina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodo_nominal', models.CharField(blank=True, help_text='Identificador del periodo nominal (ej. ENERO/01)', max_length=20, null=True)),
                ('tipo_nomina', models.CharField(choices=[('SEMANAL', 'Semanal (7 días)'), ('QUINCENAL', 'Quincenal (variable días)'), ('MENSUAL', 'Mensual (variable días)')], default='QUINCENAL', max_length=10)),
                ('fecha_inicio', models.DateField(blank=True, null=True)),
                ('fecha_fin', models.DateField(blank=True, null=True)),
                ('faltas_en_periodo', models.PositiveSmallIntegerField(default=0)),
                ('salario_neto', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('calculos', models.JSONField(default=dict)),
                ('estado', models.CharField(choices=[('BORRADOR', 'Borrador'), ('PENDIENTE', 'Pendiente de pago'), ('PAGADA', 'Pagada'), ('CANCELADA', 'Cancelada')], default='BORRADOR', max_length=10)),
                ('fecha_creacion', models.DateTimeField(blank=True, null=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('creado_por', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nominas_creadas', to=settings.AUTH_USER_MODEL)),
                ('empleado', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nominas', to='gestion.empleado')),
                ('empresa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nominas', to='gestion.empresa')),
            ],
            options={
                'verbose_name': 'Nómina',
                'verbose_name_plural': 'Nóminas',
                'ordering': ['-fecha_inicio'],
            },
        ),
        migrations.AddConstraint(
            model_name='empleado',
            constraint=models.UniqueConstraint(fields=('nombre', 'apellido_paterno', 'apellido_materno', 'empresa'), name='unique_empleado_empresa'),
        ),
        migrations.AddConstraint(
            model_name='empleado',
            constraint=models.UniqueConstraint(condition=models.Q(('activo', True)), fields=('rfc', 'empresa'), name='unique_rfc_empresa', violation_error_message='No se pueden registrar dos empleados activos con el mismo RFC en la misma empresa'),
        ),
        migrations.AddIndex(
            model_name='nomina',
            index=models.Index(fields=['empleado', 'fecha_inicio'], name='gestion_nom_emplead_8fe78d_idx'),
        ),
        migrations.AddIndex(
            model_name='nomina',
            index=models.Index(fields=['estado'], name='gestion_nom_estado_10f1a8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='nomina',
            unique_together={('empleado', 'fecha_inicio', 'fecha_fin')},
        ),
    ]
